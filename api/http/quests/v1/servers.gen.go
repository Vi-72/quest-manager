// Package servers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for CreateQuestRequestDifficulty.
const (
	CreateQuestRequestDifficultyEasy   CreateQuestRequestDifficulty = "easy"
	CreateQuestRequestDifficultyHard   CreateQuestRequestDifficulty = "hard"
	CreateQuestRequestDifficultyMedium CreateQuestRequestDifficulty = "medium"
)

// Defines values for QuestDifficulty.
const (
	QuestDifficultyEasy   QuestDifficulty = "easy"
	QuestDifficultyHard   QuestDifficulty = "hard"
	QuestDifficultyMedium QuestDifficulty = "medium"
)

// Defines values for QuestStatus.
const (
	QuestStatusAssigned   QuestStatus = "assigned"
	QuestStatusCompleted  QuestStatus = "completed"
	QuestStatusCreated    QuestStatus = "created"
	QuestStatusDeclined   QuestStatus = "declined"
	QuestStatusInProgress QuestStatus = "in_progress"
	QuestStatusPosted     QuestStatus = "posted"
)

// Defines values for ListQuestsParamsStatus.
const (
	ListQuestsParamsStatusAssigned   ListQuestsParamsStatus = "assigned"
	ListQuestsParamsStatusCompleted  ListQuestsParamsStatus = "completed"
	ListQuestsParamsStatusCreated    ListQuestsParamsStatus = "created"
	ListQuestsParamsStatusDeclined   ListQuestsParamsStatus = "declined"
	ListQuestsParamsStatusInProgress ListQuestsParamsStatus = "in_progress"
	ListQuestsParamsStatusPosted     ListQuestsParamsStatus = "posted"
)

// AssignQuestRequest defines model for AssignQuestRequest.
type AssignQuestRequest struct {
	// UserId User UUID to assign the quest to
	UserId openapi_types.UUID `json:"user_id"`
}

// AssignQuestResult defines model for AssignQuestResult.
type AssignQuestResult struct {
	// Assignee User ID who was assigned to the quest
	Assignee openapi_types.UUID `json:"assignee"`

	// Id Quest ID
	Id openapi_types.UUID `json:"id"`

	// Status Quest status
	Status QuestStatus `json:"status"`
}

// ChangeQuestStatusResult defines model for ChangeQuestStatusResult.
type ChangeQuestStatusResult struct {
	// Assignee User ID who is assigned to the quest (null if not assigned)
	Assignee *openapi_types.UUID `json:"assignee"`

	// Id Quest ID
	Id openapi_types.UUID `json:"id"`

	// Status Quest status
	Status QuestStatus `json:"status"`
}

// ChangeStatusRequest defines model for ChangeStatusRequest.
type ChangeStatusRequest struct {
	// Status Quest status
	Status QuestStatus `json:"status"`
}

// Coordinate defines model for Coordinate.
type Coordinate struct {
	// Address Optional address for this location (1-500 chars)
	Address *string `json:"address,omitempty"`

	// Latitude Latitude coordinate
	Latitude float32 `json:"latitude"`

	// Longitude Longitude coordinate
	Longitude float32 `json:"longitude"`
}

// CreateQuestRequest defines model for CreateQuestRequest.
type CreateQuestRequest struct {
	// Description Quest description (1-1000 chars, cannot be only whitespace)
	Description string                       `json:"description"`
	Difficulty  CreateQuestRequestDifficulty `json:"difficulty"`

	// DurationMinutes Quest duration in minutes (1 minute to 1 week)
	DurationMinutes int `json:"duration_minutes"`

	// Equipment List of required equipment (max 50 items)
	Equipment         *[]string  `json:"equipment,omitempty"`
	ExecutionLocation Coordinate `json:"execution_location"`

	// Reward Reward level from 1 to 5
	Reward int `json:"reward"`

	// Skills List of required skills (max 50 items)
	Skills         *[]string  `json:"skills,omitempty"`
	TargetLocation Coordinate `json:"target_location"`

	// Title Quest title (1-200 chars, cannot be only whitespace)
	Title string `json:"title"`
}

// CreateQuestRequestDifficulty defines model for CreateQuestRequest.Difficulty.
type CreateQuestRequestDifficulty string

// Quest defines model for Quest.
type Quest struct {
	Assignee    *openapi_types.UUID `json:"assignee"`
	CreatedAt   time.Time           `json:"created_at"`
	Creator     string              `json:"creator"`
	Description string              `json:"description"`
	Difficulty  QuestDifficulty     `json:"difficulty"`

	// DurationMinutes Quest duration in minutes
	DurationMinutes   int        `json:"duration_minutes"`
	Equipment         *[]string  `json:"equipment,omitempty"`
	ExecutionLocation Coordinate `json:"execution_location"`

	// ExecutionLocationId ID of the execution location in locations table (if any)
	ExecutionLocationId *string            `json:"execution_location_id"`
	Id                  openapi_types.UUID `json:"id"`

	// Reward Reward level from 1 to 5
	Reward int       `json:"reward"`
	Skills *[]string `json:"skills,omitempty"`

	// Status Quest status
	Status         QuestStatus `json:"status"`
	TargetLocation Coordinate  `json:"target_location"`

	// TargetLocationId ID of the target location in locations table (if any)
	TargetLocationId *string   `json:"target_location_id"`
	Title            string    `json:"title"`
	UpdatedAt        time.Time `json:"updated_at"`
}

// QuestDifficulty defines model for Quest.Difficulty.
type QuestDifficulty string

// QuestStatus Quest status
type QuestStatus string

// ListQuestsParams defines parameters for ListQuests.
type ListQuestsParams struct {
	// Status Filter quests by status
	Status *ListQuestsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// ListQuestsParamsStatus defines parameters for ListQuests.
type ListQuestsParamsStatus string

// ListAssignedQuestsParams defines parameters for ListAssignedQuests.
type ListAssignedQuestsParams struct {
	// UserId UUID of the user
	UserId openapi_types.UUID `form:"user_id" json:"user_id"`
}

// SearchQuestsByRadiusParams defines parameters for SearchQuestsByRadius.
type SearchQuestsByRadiusParams struct {
	// Lat Center latitude (-90 to 90)
	Lat float32 `form:"lat" json:"lat"`

	// Lon Center longitude (-180 to 180)
	Lon float32 `form:"lon" json:"lon"`

	// RadiusKm Search radius in kilometers (0.1 to 20000 km)
	RadiusKm float32 `form:"radius_km" json:"radius_km"`
}

// CreateQuestJSONRequestBody defines body for CreateQuest for application/json ContentType.
type CreateQuestJSONRequestBody = CreateQuestRequest

// AssignQuestJSONRequestBody defines body for AssignQuest for application/json ContentType.
type AssignQuestJSONRequestBody = AssignQuestRequest

// ChangeQuestStatusJSONRequestBody defines body for ChangeQuestStatus for application/json ContentType.
type ChangeQuestStatusJSONRequestBody = ChangeStatusRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of all quests
	// (GET /quests)
	ListQuests(w http.ResponseWriter, r *http.Request, params ListQuestsParams)
	// Create a new quest
	// (POST /quests)
	CreateQuest(w http.ResponseWriter, r *http.Request)
	// Get quests assigned to a user
	// (GET /quests/assigned)
	ListAssignedQuests(w http.ResponseWriter, r *http.Request, params ListAssignedQuestsParams)
	// Search quests within a radius
	// (GET /quests/search-radius)
	SearchQuestsByRadius(w http.ResponseWriter, r *http.Request, params SearchQuestsByRadiusParams)
	// Get quest details by ID
	// (GET /quests/{quest_id})
	GetQuestById(w http.ResponseWriter, r *http.Request, questId openapi_types.UUID)
	// Assign quest to a user
	// (POST /quests/{quest_id}/assign)
	AssignQuest(w http.ResponseWriter, r *http.Request, questId openapi_types.UUID)
	// Change quest status
	// (PATCH /quests/{quest_id}/status)
	ChangeQuestStatus(w http.ResponseWriter, r *http.Request, questId openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get a list of all quests
// (GET /quests)
func (_ Unimplemented) ListQuests(w http.ResponseWriter, r *http.Request, params ListQuestsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new quest
// (POST /quests)
func (_ Unimplemented) CreateQuest(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get quests assigned to a user
// (GET /quests/assigned)
func (_ Unimplemented) ListAssignedQuests(w http.ResponseWriter, r *http.Request, params ListAssignedQuestsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search quests within a radius
// (GET /quests/search-radius)
func (_ Unimplemented) SearchQuestsByRadius(w http.ResponseWriter, r *http.Request, params SearchQuestsByRadiusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get quest details by ID
// (GET /quests/{quest_id})
func (_ Unimplemented) GetQuestById(w http.ResponseWriter, r *http.Request, questId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Assign quest to a user
// (POST /quests/{quest_id}/assign)
func (_ Unimplemented) AssignQuest(w http.ResponseWriter, r *http.Request, questId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change quest status
// (PATCH /quests/{quest_id}/status)
func (_ Unimplemented) ChangeQuestStatus(w http.ResponseWriter, r *http.Request, questId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListQuests operation middleware
func (siw *ServerInterfaceWrapper) ListQuests(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListQuestsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListQuests(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateQuest operation middleware
func (siw *ServerInterfaceWrapper) CreateQuest(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateQuest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAssignedQuests operation middleware
func (siw *ServerInterfaceWrapper) ListAssignedQuests(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssignedQuestsParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := r.URL.Query().Get("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "user_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssignedQuests(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchQuestsByRadius operation middleware
func (siw *ServerInterfaceWrapper) SearchQuestsByRadius(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchQuestsByRadiusParams

	// ------------- Required query parameter "lat" -------------

	if paramValue := r.URL.Query().Get("lat"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "lat"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "lat", r.URL.Query(), &params.Lat)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lat", Err: err})
		return
	}

	// ------------- Required query parameter "lon" -------------

	if paramValue := r.URL.Query().Get("lon"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "lon"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "lon", r.URL.Query(), &params.Lon)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lon", Err: err})
		return
	}

	// ------------- Required query parameter "radius_km" -------------

	if paramValue := r.URL.Query().Get("radius_km"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "radius_km"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "radius_km", r.URL.Query(), &params.RadiusKm)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "radius_km", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchQuestsByRadius(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetQuestById operation middleware
func (siw *ServerInterfaceWrapper) GetQuestById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "quest_id" -------------
	var questId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "quest_id", chi.URLParam(r, "quest_id"), &questId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "quest_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetQuestById(w, r, questId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AssignQuest operation middleware
func (siw *ServerInterfaceWrapper) AssignQuest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "quest_id" -------------
	var questId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "quest_id", chi.URLParam(r, "quest_id"), &questId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "quest_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AssignQuest(w, r, questId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ChangeQuestStatus operation middleware
func (siw *ServerInterfaceWrapper) ChangeQuestStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "quest_id" -------------
	var questId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "quest_id", chi.URLParam(r, "quest_id"), &questId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "quest_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangeQuestStatus(w, r, questId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/quests", wrapper.ListQuests)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/quests", wrapper.CreateQuest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/quests/assigned", wrapper.ListAssignedQuests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/quests/search-radius", wrapper.SearchQuestsByRadius)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/quests/{quest_id}", wrapper.GetQuestById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/quests/{quest_id}/assign", wrapper.AssignQuest)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/quests/{quest_id}/status", wrapper.ChangeQuestStatus)
	})

	return r
}

type ListQuestsRequestObject struct {
	Params ListQuestsParams
}

type ListQuestsResponseObject interface {
	VisitListQuestsResponse(w http.ResponseWriter) error
}

type ListQuests200JSONResponse []Quest

func (response ListQuests200JSONResponse) VisitListQuestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListQuests401Response struct {
}

func (response ListQuests401Response) VisitListQuestsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListQuests500Response struct {
}

func (response ListQuests500Response) VisitListQuestsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateQuestRequestObject struct {
	Body *CreateQuestJSONRequestBody
}

type CreateQuestResponseObject interface {
	VisitCreateQuestResponse(w http.ResponseWriter) error
}

type CreateQuest201JSONResponse Quest

func (response CreateQuest201JSONResponse) VisitCreateQuestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateQuest400Response struct {
}

func (response CreateQuest400Response) VisitCreateQuestResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateQuest401Response struct {
}

func (response CreateQuest401Response) VisitCreateQuestResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateQuest500Response struct {
}

func (response CreateQuest500Response) VisitCreateQuestResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ListAssignedQuestsRequestObject struct {
	Params ListAssignedQuestsParams
}

type ListAssignedQuestsResponseObject interface {
	VisitListAssignedQuestsResponse(w http.ResponseWriter) error
}

type ListAssignedQuests200JSONResponse []Quest

func (response ListAssignedQuests200JSONResponse) VisitListAssignedQuestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAssignedQuests400Response struct {
}

func (response ListAssignedQuests400Response) VisitListAssignedQuestsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListAssignedQuests401Response struct {
}

func (response ListAssignedQuests401Response) VisitListAssignedQuestsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListAssignedQuests500Response struct {
}

func (response ListAssignedQuests500Response) VisitListAssignedQuestsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type SearchQuestsByRadiusRequestObject struct {
	Params SearchQuestsByRadiusParams
}

type SearchQuestsByRadiusResponseObject interface {
	VisitSearchQuestsByRadiusResponse(w http.ResponseWriter) error
}

type SearchQuestsByRadius200JSONResponse []Quest

func (response SearchQuestsByRadius200JSONResponse) VisitSearchQuestsByRadiusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchQuestsByRadius400Response struct {
}

func (response SearchQuestsByRadius400Response) VisitSearchQuestsByRadiusResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SearchQuestsByRadius401Response struct {
}

func (response SearchQuestsByRadius401Response) VisitSearchQuestsByRadiusResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SearchQuestsByRadius500Response struct {
}

func (response SearchQuestsByRadius500Response) VisitSearchQuestsByRadiusResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetQuestByIdRequestObject struct {
	QuestId openapi_types.UUID `json:"quest_id"`
}

type GetQuestByIdResponseObject interface {
	VisitGetQuestByIdResponse(w http.ResponseWriter) error
}

type GetQuestById200JSONResponse Quest

func (response GetQuestById200JSONResponse) VisitGetQuestByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetQuestById401Response struct {
}

func (response GetQuestById401Response) VisitGetQuestByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetQuestById404Response struct {
}

func (response GetQuestById404Response) VisitGetQuestByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetQuestById500Response struct {
}

func (response GetQuestById500Response) VisitGetQuestByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AssignQuestRequestObject struct {
	QuestId openapi_types.UUID `json:"quest_id"`
	Body    *AssignQuestJSONRequestBody
}

type AssignQuestResponseObject interface {
	VisitAssignQuestResponse(w http.ResponseWriter) error
}

type AssignQuest200JSONResponse AssignQuestResult

func (response AssignQuest200JSONResponse) VisitAssignQuestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssignQuest400Response struct {
}

func (response AssignQuest400Response) VisitAssignQuestResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssignQuest401Response struct {
}

func (response AssignQuest401Response) VisitAssignQuestResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssignQuest404Response struct {
}

func (response AssignQuest404Response) VisitAssignQuestResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssignQuest500Response struct {
}

func (response AssignQuest500Response) VisitAssignQuestResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ChangeQuestStatusRequestObject struct {
	QuestId openapi_types.UUID `json:"quest_id"`
	Body    *ChangeQuestStatusJSONRequestBody
}

type ChangeQuestStatusResponseObject interface {
	VisitChangeQuestStatusResponse(w http.ResponseWriter) error
}

type ChangeQuestStatus200JSONResponse ChangeQuestStatusResult

func (response ChangeQuestStatus200JSONResponse) VisitChangeQuestStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeQuestStatus400Response struct {
}

func (response ChangeQuestStatus400Response) VisitChangeQuestStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ChangeQuestStatus401Response struct {
}

func (response ChangeQuestStatus401Response) VisitChangeQuestStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ChangeQuestStatus404Response struct {
}

func (response ChangeQuestStatus404Response) VisitChangeQuestStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ChangeQuestStatus500Response struct {
}

func (response ChangeQuestStatus500Response) VisitChangeQuestStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get a list of all quests
	// (GET /quests)
	ListQuests(ctx context.Context, request ListQuestsRequestObject) (ListQuestsResponseObject, error)
	// Create a new quest
	// (POST /quests)
	CreateQuest(ctx context.Context, request CreateQuestRequestObject) (CreateQuestResponseObject, error)
	// Get quests assigned to a user
	// (GET /quests/assigned)
	ListAssignedQuests(ctx context.Context, request ListAssignedQuestsRequestObject) (ListAssignedQuestsResponseObject, error)
	// Search quests within a radius
	// (GET /quests/search-radius)
	SearchQuestsByRadius(ctx context.Context, request SearchQuestsByRadiusRequestObject) (SearchQuestsByRadiusResponseObject, error)
	// Get quest details by ID
	// (GET /quests/{quest_id})
	GetQuestById(ctx context.Context, request GetQuestByIdRequestObject) (GetQuestByIdResponseObject, error)
	// Assign quest to a user
	// (POST /quests/{quest_id}/assign)
	AssignQuest(ctx context.Context, request AssignQuestRequestObject) (AssignQuestResponseObject, error)
	// Change quest status
	// (PATCH /quests/{quest_id}/status)
	ChangeQuestStatus(ctx context.Context, request ChangeQuestStatusRequestObject) (ChangeQuestStatusResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListQuests operation middleware
func (sh *strictHandler) ListQuests(w http.ResponseWriter, r *http.Request, params ListQuestsParams) {
	var request ListQuestsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListQuests(ctx, request.(ListQuestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListQuests")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListQuestsResponseObject); ok {
		if err := validResponse.VisitListQuestsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateQuest operation middleware
func (sh *strictHandler) CreateQuest(w http.ResponseWriter, r *http.Request) {
	var request CreateQuestRequestObject

	var body CreateQuestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateQuest(ctx, request.(CreateQuestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateQuest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateQuestResponseObject); ok {
		if err := validResponse.VisitCreateQuestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAssignedQuests operation middleware
func (sh *strictHandler) ListAssignedQuests(w http.ResponseWriter, r *http.Request, params ListAssignedQuestsParams) {
	var request ListAssignedQuestsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAssignedQuests(ctx, request.(ListAssignedQuestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAssignedQuests")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAssignedQuestsResponseObject); ok {
		if err := validResponse.VisitListAssignedQuestsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchQuestsByRadius operation middleware
func (sh *strictHandler) SearchQuestsByRadius(w http.ResponseWriter, r *http.Request, params SearchQuestsByRadiusParams) {
	var request SearchQuestsByRadiusRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchQuestsByRadius(ctx, request.(SearchQuestsByRadiusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchQuestsByRadius")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchQuestsByRadiusResponseObject); ok {
		if err := validResponse.VisitSearchQuestsByRadiusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetQuestById operation middleware
func (sh *strictHandler) GetQuestById(w http.ResponseWriter, r *http.Request, questId openapi_types.UUID) {
	var request GetQuestByIdRequestObject

	request.QuestId = questId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetQuestById(ctx, request.(GetQuestByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetQuestById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetQuestByIdResponseObject); ok {
		if err := validResponse.VisitGetQuestByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AssignQuest operation middleware
func (sh *strictHandler) AssignQuest(w http.ResponseWriter, r *http.Request, questId openapi_types.UUID) {
	var request AssignQuestRequestObject

	request.QuestId = questId

	var body AssignQuestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AssignQuest(ctx, request.(AssignQuestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssignQuest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AssignQuestResponseObject); ok {
		if err := validResponse.VisitAssignQuestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeQuestStatus operation middleware
func (sh *strictHandler) ChangeQuestStatus(w http.ResponseWriter, r *http.Request, questId openapi_types.UUID) {
	var request ChangeQuestStatusRequestObject

	request.QuestId = questId

	var body ChangeQuestStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeQuestStatus(ctx, request.(ChangeQuestStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeQuestStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ChangeQuestStatusResponseObject); ok {
		if err := validResponse.VisitChangeQuestStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"IjK/mP8ZAAD//5ICE6I7IwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
