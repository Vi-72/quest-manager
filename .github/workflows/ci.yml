name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Tests and Coverage
    runs-on: ubuntu-latest
    


    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download



    - name: Run Unit and Contract Tests
      run: |
        echo "🧪 Running Unit Tests with Coverage..."
        go test ./tests/domain -v -race -coverprofile=unit_coverage.out
        
        echo "🤝 Running Contract Tests..."
        go test ./tests/contracts -v -race

    - name: Run Coverage Check
      run: |
        echo "🎯 Running Coverage Check..."
        chmod +x scripts/coverage-check.sh
        ./scripts/coverage-check.sh

    - name: Tests Completed
      run: |
        echo "✅ All tests completed successfully!"
        echo "🧪 Unit Tests: PASSED"
        echo "🤝 Contract Tests: PASSED" 
        echo "📊 Coverage: Check output above"

    - name: Check Coverage Threshold
      run: |
        COVERAGE=${{ env.TOTAL_COVERAGE }}
        THRESHOLD=70
        
        echo "Coverage: $COVERAGE%"
        echo "Threshold: $THRESHOLD%"
        
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below threshold $THRESHOLD%"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets threshold $THRESHOLD%"
        fi

  lint:
    name: Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m --out-format=line-number

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build application
      run: |
        echo "🔨 Building Quest Manager..."
        make build
        
    - name: Test binary
      run: |
        ls -la task-server
        ./task-server --help || echo "Binary created successfully"